# Create clean genomes.
python synLTR2/fasta_renamer_diploid.py -genomes 9311v2.fa DHX2.fa Nipponb.fa -processes 3 -out_dir step1 -out_suffix disable
cd step1/ 

# Get proteins.
python ../synLTR2/liftover.py --genome Nipponb.fa 9311v2.fa DHX2.fa --reference ../Sbico.pep --outn 1 --outs 0.95 --outc 0.9 --threads 250 --cdhit --outputs pep bed --TEsorter 

# Get synteny.
python ../synLTR2/jcvi_diploid.py -p 3 --cpus 100 --keep anchors pdf --prot


# Im pretty confident to here....

# Build anchors.
for f in *.anchors; do      base=$f;     python ../synLTR2/anchor_builder.py "$base" > "$base.recip";     python ../synLTR2/gene_coords_extractor_all4_phyloweave.py -mcscan "$base.recip" > "$base.recip.coords";     python ../synLTR2/anchor_coord_subtracter.py "$base.recip.coords" "$base.recip.coords.polished";     python ../synLTR2/anchor_coord_subtracter.py "$base.recip.coords.polished" "$base.recip.coords.polished2";     python ../synLTR2/anchor_coord_consolidator.py -t 15000 "$base.recip.coords.polished2" --stitch-gaps > "$base.recip.coords.polished2.consolidated"; done
# This might need a bit more work...
# I do two passes over "anchor_coord_subtracter.py" to collapse regions that remain overlaping. 
# 'anchor_builder.py' has a transposition function, but its computationally cheaper to transpose at the end since "anchor_coord_subtracter.py" takes a second. 
# 'anchor_coord_consolidator.py' consolidates adjacent anchors if theyre too small. Im thinking smaller than 15kb. 
# It also now trys to stitch sections that are not covered by anchors. 
# With rice, it appeared 99% of the genome was covered in anchors, leaving 4.4Mb unaccounded for. Adding the stitching fuction was consertvative and dropped it to 3.8 Mb. 
# I think its mainly just chromosome ends that are uncovered now. I should leave them though, since scaffolded sequences add some confusion for filling terminal gaps.
# I made 'anchor_coord_consolidator2.py', which might have better handling of filling gaps in minus strand.

